// Code generated by MockGen. DO NOT EDIT.
// Source: src/business/domain/record/record.go
//
// Generated by this command:
//
//	mockgen -source src/business/domain/record/record.go -destination src/mock/business/domin/record/record.go
//

// Package mock_record is a generated GoMock package.
package mock_record

import (
	context "context"
	entity "mezink/src/business/entity"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDomainItf is a mock of DomainItf interface.
type MockDomainItf struct {
	ctrl     *gomock.Controller
	recorder *MockDomainItfMockRecorder
}

// MockDomainItfMockRecorder is the mock recorder for MockDomainItf.
type MockDomainItfMockRecorder struct {
	mock *MockDomainItf
}

// NewMockDomainItf creates a new mock instance.
func NewMockDomainItf(ctrl *gomock.Controller) *MockDomainItf {
	mock := &MockDomainItf{ctrl: ctrl}
	mock.recorder = &MockDomainItfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainItf) EXPECT() *MockDomainItfMockRecorder {
	return m.recorder
}

// GetRecords mocks base method.
func (m *MockDomainItf) GetRecords(ctx context.Context, param entity.RecordParam) ([]entity.Record, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecords", ctx, param)
	ret0, _ := ret[0].([]entity.Record)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecords indicates an expected call of GetRecords.
func (mr *MockDomainItfMockRecorder) GetRecords(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecords", reflect.TypeOf((*MockDomainItf)(nil).GetRecords), ctx, param)
}
